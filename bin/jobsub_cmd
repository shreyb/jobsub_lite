#!/usr/bin/python3 -I

#
# jobsub_cmd -- generic wrapper for condor commands
# COPYRIGHT 2022 FERMI NATIONAL ACCELERATOR LABORATORY
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import os
import sys
import re
from typing import Any, Union


PREFIX = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(os.path.join(PREFIX, "lib"))

import fake_ifdh


class StoreGroupinEnvironment(argparse.Action):
    """Action to store the given group in the GROUP environment variable"""

    def __call__(
        self,
        parser: argparse.ArgumentParser,
        namespace: argparse.Namespace,
        values: Any,
        option_string: Union[None, str] = None,
    ):
        os.environ["GROUP"] = values
        setattr(namespace, self.dest, values)


def main() -> None:
    parser = argparse.ArgumentParser(description="Condor command wrapper")
    parser.add_argument(
        "-G",
        "--group",
        help="Group/Experiment/Subgroup for priorities and accounting",
        action=StoreGroupinEnvironment,
    )
    parser.add_argument(
        "--role", help="VOMS Role for priorities and accounting", default="Analysis"
    )

    arglist, passthru = parser.parse_known_args()

    if os.environ.get("GROUP", None) is None:
        raise AttributeError(
            "%s needs -G group or $GROUP in the environment." % sys.argv[0]
        )

    # make list of arguments to pass to condor command:
    # - the passthru arguments from above, except if we have
    #   any 234@schedd style arguments, pick out the schedd and
    #   keep the 234, and pass --name schedd as well
    execargs = []
    schedd = None
    for i in passthru:
        m = re.match(r"([\d.]+)@([\w.]+)", i)
        if m:
            # looks like a jobsub id 12.34@schedd.name
            schedd = m.group(2)
            i = m.group(1)
        execargs.append(i)

    if schedd:
        execargs.insert(0, schedd)
        execargs.insert(0, "-name")

    # also make sure we have suitable credentials...
    role = fake_ifdh.getRole(arglist.role)
    os.environ["X509_USER_PROXY"] = fake_ifdh.getProxy(role)
    os.environ["BEARER_TOKEN_FILE"] = fake_ifdh.getToken(role)

    # and find the wrapped command name
    cmd = os.path.basename(sys.argv[0])

    # combine jobsub_q as well
    if cmd == "jobsub_q":
        execargs.insert(0, "-global")

    cmd = cmd.replace("jobsub_", "condor_")

    execargs.insert(0, cmd)

    # now run the command with those arguments
    os.execvp("/usr/bin/" + cmd, execargs)


if __name__ == "__main__":
    main()
